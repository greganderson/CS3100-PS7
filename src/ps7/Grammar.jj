/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.8";  static = false;}/**
 * This defines the main class that is generated by the parser generator.  We've
 * added a main method to the code that will be generated.
**/PARSER_BEGIN(PS7Compiler)package ps7;import java.util.HashMap;
public class PS7Compiler{
  // Maps programming language variables to DC registers  private HashMap < String, Character > variables =
        new HashMap < String, Character > ();
  // Maps programming language variables to types.
  private HashMap<String, String > types =
        new HashMap<String, String >();

  // If the t is not "int", throws a TypeException
  public void checkInt (String type)
  {    if (!(type.equals("int")))
    {      throw new TypeException("Expected int, received " + type);
    }
  }
    // If the t is not "int", throws a TypeException
  public void checkBool (String type)
  {
    if (!type.equals("boolean"))
    {
      throw new TypeException("Expected boolean, received " + type);
    }
  }
    public static void main(String args [])  {    PS7Compiler parser = new PS7Compiler(System.in);    try    {      parser.program();    }
    catch (TypeException e)
    {      System.err.println(e.getMessage());
    }    catch (ParseException e)    {      System.err.println(e.getMessage());    }    catch (TokenMgrError e)    {      System.err.println(e.getMessage());    }
    catch (RuntimeException e)
    {
      System.err.println(e.getMessage());
    }  }}

/**
 * Exception used to report type-checking errors.
 */
 class TypeException extends RuntimeException
 {   public TypeException (String message)
   {     super(message);
   }
 }PARSER_END(PS7Compiler)/************************ Regular expressions that define tokens ***********************/SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* OPERATORS */{  < EQUALS : "=" >| < PLUS : "+" >| < MINUS : "-" >
| < LESSTHAN : "<" >
| < GREATERTHAN : ">" >
| < ISEQUAL : "==" >| < MULTIPLY : "*" >| < DIVIDE : "/" >
| < BANG : "!" >}TOKEN :{
  < INTTYPE : "int" >
| < STRINGTYPE : "string" >
| < BOOLEANTYPE : "boolean" >| < PRINT : "print" >
| < NEWLINE : "newline" >| < CONSTANT : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >
| < BOOLEAN : ("true" | "false") >| < VAR : (< LETTER >)+ >| < #LETTER :    [ "a"-"z" ]  | [ "A"-"Z" ] >
| < STRING: "\"" (~["\"", "[", "]"])* "\"" >}/***************************** Productions that define grammar *******************/void program() :{
}{  (    statement()
  | declaration()
  | conditional()  )*
  < EOF >}

void conditional() :
{
  String bool;}
{
  (
    "if (" bool = cmp_exp() ") " 
    {
      checkBool(bool);
      System.out.print("sa [");    }
    "{ " (statement())+ " } "
    {
      System.out.print("] la 0 [sa [");    }
    "else { " (statement())+ " }"
    {
      System.out.print("]] sa =a x");    }  )}
void statement() :{  Token t;
  Token type;
  String etype;}{  (
    (type = < INTTYPE > | type = < STRINGTYPE > | type = < BOOLEANTYPE >)      t = < VAR > < EQUALS > etype = cmp_exp() ";"
    {
      if (variables.get(t.image) == null)
      {
        if (variables.size() >= 26)
        {
          throw new TypeException("Too many variables; limit is 26");
        }
        variables.put(t.image, (char) ('A' + variables.size()));
		types.put(t.image, type.image);

		if (!type.image.equals(etype))
		{
		  System.out.println("GOT HERE: " + type.image + ", " + etype);		  throw new TypeException("Type mismatch");
		}
		
		char reg2 = variables.get(t.image);
        System.out.println("s" + reg2 + " ");
      }
      else
      {        throw new TypeException("Variable already declared: " + t.image);
      }
    }
  )
|     (    < PRINT > etype = cmp_exp() ";"    {
      if (etype.equals("boolean"))      {
        System.out.println("sa [true] la 0 [sa [false]] sa =a n");      }
      else      {
        System.out.println("n ");      }          }  )
|
	(
	  < NEWLINE > ";"
	  {	    System.out.println("[] n ");
	  }	)}

void declaration() :
{
  Token t;
  Token type;
  String etype;
}
{
  (
    t = < VAR > < EQUALS > etype = cmp_exp() ";"
    {
      if (variables.get(t.image) == null)
      {
          throw new TypeException("Undeclared variable: " + t.image);
      }

      if (!types.get(t.image).equals(etype))
	  {
		  throw new TypeException("Type mismatch");
      }
		
      char reg = variables.get(t.image);
      System.out.println("s" + reg + " ");
    }
  )
}

String cmp_exp() :
{	Token t;
	String cmp_type1, cmp_type2;
}
{
  cmp_type1 = exp()
  (
    (
      t = < GREATERTHAN >
    | t = < LESSTHAN >
    | t = < ISEQUAL >
    )
    cmp_type2 = exp()
    {
      if (t.image.equals("<"))      {
      	System.out.print("sa sb 1 lb la [sa 0] sa <a ");
      	return "boolean";      }
      else if (t.image.equals(">"))
      {
        System.out.print("sa sb 1 lb la [sa 0] sa >a ");
        return "boolean";      }
      else if (t.image.equals("=="))      {
        System.out.print("sa sb 0 lb la [sa 1] sa =a ");
        try        {  			checkBool(cmp_type1);
			checkBool(cmp_type2);
		}
		catch(TypeException e)		{
		  checkInt(cmp_type1);
		  checkInt(cmp_type2);		}
      }
      else      {
      	checkInt(cmp_type1);
	  	checkInt(cmp_type2);
	  }
    }
  )*
  {
    return cmp_type1;
  }
}String exp() :{  Token t;
  String type5, type6;}{  type5 = term()  (    (      t = < PLUS >    | t = < MINUS >    )    type6 = term()    {      System.out.print(t.image + " ");
      checkInt(type5);
	  checkInt(type6);
    }  )*
  {    return type5;
  }}String term() :{  Token t;
  String type3, type4;}{  type3 = factor()  (    (      t = < MULTIPLY >    | t = < DIVIDE >    )    type4 = factor()    {      System.out.print(t.image + " ");
      checkInt(type3);
      checkInt(type4);    }  )*
  {
    return type3;  }}String factor() :{
  String type2;
}{  "-"  type2 = element()
  {
    checkInt(type2);
    System.out.print("_1 * ");
    return "int";  }
|
  < BANG >
  type2 = element()
  {
    checkBool(type2);
    System.out.println("sa 1 la 1 [sa 0] sa =a ");
    return type2;  }| type2 = element()
  {	return type2;
  }}String element() :{  Token t;
  String type1;}{  t = < CONSTANT >  {    System.out.print(t.image + " ");
    return "int";  }
|
	t = < BOOLEAN >
	{
	  if (t.image.equals("true"))	  {		System.out.println("1 ");
	  }
	  else	  {		System.out.println("0 ");
	  }
		return "boolean";
	}
|
  t = < STRING >
  {
    String dcs = t.image.replaceFirst("\"", "[");
    dcs = dcs.replaceFirst("\"", "]");	System.out.println(dcs);
	return "string";
  }
|    t = < VAR >  {    Character reg = variables.get(t.image);    if (reg == null)    {
      throw new RuntimeException("Undefined variable " + t.image);    }    else    {      System.out.print("l" + reg + " ");
      return types.get(t.image);    }  }
| "(" type1 = cmp_exp() ")"
  {	return type1;
  }}
